version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

jobs:
  build-and-test:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Install JDK 21
          command: |
            sudo apt-get update -y
            sudo apt-get install -y openjdk-21-jdk
            java -version
      - run:
          name: Ensure Docker is running
          command: |
            docker --version
            docker info
            docker ps
      - gradle/with_cache:
          steps:
            - run:
                name: Build and Test
                command: ./gradlew clean build
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports
          destination: reports

  publish-to-jitpack:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Install JDK 21
          command: |
            sudo apt-get update -y
            sudo apt-get install -y openjdk-21-jdk
            java -version
      - run:
          name: Ensure Docker is running
          command: |
            docker --version
            docker info
            docker ps
      - run:
          name: Set Version
          command: |
            # Check if we're on the main branch
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              # For main branch, use the build number for versioning
              echo "export VERSION=1.0.${CIRCLE_BUILD_NUM}" >> $BASH_ENV
              echo "export IS_MAIN_BRANCH=true" >> $BASH_ENV
            else
              # For other branches, use SNAPSHOT versioning
              echo "export VERSION=1.0.0-SNAPSHOT" >> $BASH_ENV
              echo "export IS_MAIN_BRANCH=false" >> $BASH_ENV
            fi
            source $BASH_ENV
            echo "Using version: ${VERSION}"
      - gradle/with_cache:
          steps:
            - run:
                name: Build with Version
                command: |
                  echo "Using version: ${VERSION}"
                  ./gradlew clean build -Pversion=${VERSION}
            - run:
                name: Publish to Local Maven Repository
                command: |
                  echo "Publishing with version: ${VERSION}"
                  ./gradlew publishToMavenLocal -Pversion=${VERSION}
      - run:
          name: Create and Push Git Tag
          command: |
            # Only create tags for main branch builds
            if [ "${IS_MAIN_BRANCH}" == "true" ]; then
              echo "Creating tag for version: ${VERSION}"
              git config user.email "ci@incept5.com"
              git config user.name "CircleCI"
              
              # Check if tag already exists
              if git rev-parse "${VERSION}" >/dev/null 2>&1; then
                echo "Tag ${VERSION} already exists, skipping tag creation"
              else
                echo "Creating new tag ${VERSION}"
                git tag -a "${VERSION}" -m "Release version ${VERSION}"
                git push origin "${VERSION}"
              fi
            else
              echo "Skipping tag creation for non-main branch build"
            fi
      - run:
          name: Verify Local Maven Repository
          command: |
            # Debug information
            echo "Maven repository location: $HOME/.m2/repository"
            echo "Using version: ${VERSION}"
            
            # List all artifacts in the local Maven repository
            echo "All artifacts in Maven repository:"
            find $HOME/.m2/repository/com/github/incept5 -type f -name "*.jar" | sort
            
            # Verify that JARs exist locally
            if [ ! -f "$HOME/.m2/repository/com/github/incept5/scheduler-db/${VERSION}/scheduler-db-${VERSION}.jar" ]; then
              echo "scheduler: scheduler-db JAR not found locally at expected path"
              echo "Expected: $HOME/.m2/repository/com/github/incept5/scheduler-db/${VERSION}/scheduler-db-${VERSION}.jar"
            
              # Check if the directory exists
              if [ -d "$HOME/.m2/repository/com/github/incept5/scheduler-db" ]; then
                echo "Available versions for scheduler-db:"
                ls -la "$HOME/.m2/repository/com/github/incept5/scheduler-db/"
              fi
            
              # Try to find it elsewhere
              echo "Searching for scheduler-db JAR:"
              find $HOME/.m2/repository -name "scheduler-db-*.jar" | sort
            
              # Try one more publish with explicit version
              echo "Attempting one more publish with explicit version ${VERSION}"
              ./gradlew :scheduler-db:clean :scheduler-db:build :scheduler-db:publishToMavenLocal -Pversion=${VERSION} --stacktrace
            
              # Check again
              if [ -f "$HOME/.m2/repository/com/github/incept5/scheduler-db/${VERSION}/scheduler-db-${VERSION}.jar" ]; then
                echo "Successfully published scheduler-db JAR after retry"
              else
                echo "Failed to publish scheduler-db JAR after retry"
                exit 1
              fi
            fi
            
            if [ ! -f "$HOME/.m2/repository/com/github/incept5/scheduler-core/${VERSION}/scheduler-core-${VERSION}.jar" ]; then
              echo "scheduler: scheduler-core JAR not found locally at expected path"
              echo "Expected: $HOME/.m2/repository/com/github/incept5/scheduler-core/${VERSION}/scheduler-core-${VERSION}.jar"
              
              # Check if the directory exists
              if [ -d "$HOME/.m2/repository/com/github/incept5/scheduler-core" ]; then
                echo "Available versions for scheduler-core:"
                ls -la "$HOME/.m2/repository/com/github/incept5/scheduler-core/"
              fi
              
              # Try to find it elsewhere
              echo "Searching for scheduler-core JAR:"
              find $HOME/.m2/repository -name "scheduler-core-*.jar" | sort
              
              # Try one more publish with explicit version
              echo "Attempting one more publish with explicit version ${VERSION}"
              ./gradlew :scheduler-core:clean :scheduler-core:build :scheduler-core:publishToMavenLocal -Pversion=${VERSION} --stacktrace
              
              # Check again
              if [ -f "$HOME/.m2/repository/com/github/incept5/scheduler-core/${VERSION}/scheduler-core-${VERSION}.jar" ]; then
                echo "Successfully published scheduler-core JAR after retry"
              else
                echo "Failed to publish scheduler-core JAR after retry"
                exit 1
              fi
            fi
            
            if [ ! -f "$HOME/.m2/repository/com/github/incept5/scheduler-quarkus/${VERSION}/scheduler-quarkus-${VERSION}.jar" ]; then
              echo "scheduler: scheduler-quarkus JAR not found locally at expected path"
              echo "Expected: $HOME/.m2/repository/com/github/incept5/scheduler-quarkus/${VERSION}/scheduler-quarkus-${VERSION}.jar"
              
              # Check if the directory exists
              if [ -d "$HOME/.m2/repository/com/github/incept5/scheduler-quarkus" ]; then
                echo "Available versions for scheduler-quarkus:"
                ls -la "$HOME/.m2/repository/com/github/incept5/scheduler-quarkus/"
              fi
              
              # Try to find it elsewhere
              echo "Searching for scheduler-quarkus JAR:"
              find $HOME/.m2/repository -name "scheduler-quarkus-*.jar" | sort
              
              # Try one more publish with explicit version
              echo "Attempting one more publish with explicit version ${VERSION}"
              ./gradlew :scheduler-quarkus:clean :scheduler-quarkus:build :scheduler-quarkus:publishToMavenLocal -Pversion=${VERSION} --stacktrace
              
              # Check again
              if [ -f "$HOME/.m2/repository/com/github/incept5/scheduler-quarkus/${VERSION}/scheduler-quarkus-${VERSION}.jar" ]; then
                echo "Successfully published scheduler-quarkus JAR after retry"
              else
                echo "Failed to publish scheduler-quarkus JAR after retry"
                exit 1
              fi
            fi
            
            echo "All artifacts verified in local Maven repository"
      
      # Only trigger JitPack for main branch builds
      - run:
          name: Trigger JitPack Build
          command: |
            # Only publish to JitPack for main branch builds
            if [ "${IS_MAIN_BRANCH}" == "true" ]; then
              echo "Triggering JitPack build for version ${VERSION}"
              # Trigger the root project build on JitPack
              curl -s "https://jitpack.io/com/github/incept5/scheduler-lib/${VERSION}/scheduler-lib-${VERSION}.pom" || true
              
              echo "JitPack build triggered for version ${VERSION}"
              echo "Root project will be available at: https://jitpack.io/#incept5/scheduler-lib/${VERSION}"
              echo "Modules will be available at:"
              echo "- https://jitpack.io/#incept5/scheduler-lib/scheduler-db/${VERSION}"
              echo "- https://jitpack.io/#incept5/scheduler-lib/scheduler-core/${VERSION}"
              echo "- https://jitpack.io/#incept5/scheduler-lib/scheduler-quarkus/${VERSION}"
              
              # Wait for JitPack to process the build
              echo "Waiting for JitPack to process the build..."
              sleep 180  # Increased wait time to allow JitPack to process
              
              # Verify the build status for the root project
              ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/scheduler-lib/${VERSION}/scheduler-lib-${VERSION}.pom")
              if [ "$ROOT_STATUS" -eq 200 ]; then
                echo "Root project successfully published to JitPack!"
              else
                echo "Root project not found on JitPack. Status code: $ROOT_STATUS"
                echo "Check status at: https://jitpack.io/#incept5/scheduler-lib/${VERSION}"
              fi
              
              # Verify the build status for scheduler-db module
              CORE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/scheduler-lib/scheduler-db/${VERSION}/scheduler-core-${VERSION}.jar")
              if [ "$CORE_STATUS" -eq 200 ]; then
                echo "scheduler-db artifact successfully published to JitPack!"
              else
                echo "scheduler-db artifact not found on JitPack. Status code: $CORE_STATUS"
                echo "Check status at: https://jitpack.io/#incept5/scheduler-lib/${VERSION}"
              fi
              
              # Verify the build status for scheduler-core module
              CORE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/scheduler-lib/scheduler-core/${VERSION}/scheduler-core-${VERSION}.jar")
              if [ "$CORE_STATUS" -eq 200 ]; then
                echo "scheduler-core artifact successfully published to JitPack!"
              else
                echo "scheduler-core artifact not found on JitPack. Status code: $CORE_STATUS"
                echo "Check status at: https://jitpack.io/#incept5/scheduler-lib/${VERSION}"
              fi
              
              # Verify the build status for scheduler-quarkus module
              QUARKUS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/scheduler-lib/scheduler-quarkus/${VERSION}/scheduler-quarkus-${VERSION}.jar")
              if [ "$QUARKUS_STATUS" -eq 200 ]; then
                echo "scheduler-quarkus artifact successfully published to JitPack!"
              else
                echo "scheduler-quarkus artifact not found on JitPack. Status code: $QUARKUS_STATUS"
                echo "Check status at: https://jitpack.io/#incept5/scheduler-lib/${VERSION}"
              fi
              
              # Final verification
              if [ "$ROOT_STATUS" -eq 200 ] && [ "$CORE_STATUS" -eq 200 ] && [ "$QUARKUS_STATUS" -eq 200 ]; then
                echo "All artifacts successfully published to JitPack!"
              else
                echo "WARNING: One or more artifacts may not be available yet on JitPack."
                echo "This is normal as JitPack may take some time to process the build."
                echo ""
                echo "To use these artifacts in your project:"
                echo "1. Add the JitPack repository to your build file"
                echo "   repositories {"
                echo "     maven { url 'https://jitpack.io' }"
                echo "   }"
                echo ""
                echo "2. Add the dependencies"
                echo "   dependencies {"
                echo "     implementation 'com.github.incept5.scheduler-lib:scheduler-db:${VERSION}'"
                echo "     implementation 'com.github.incept5.scheduler-lib:scheduler-core:${VERSION}'"
                echo "     implementation 'com.github.incept5.scheduler-lib:scheduler-quarkus:${VERSION}'"
                echo "   }"
                echo ""
                echo "3. Or use the root project (includes all modules)"
                echo "   dependencies {"
                echo "     implementation 'com.github.incept5:scheduler-lib:${VERSION}'"
                echo "   }"
              fi
            else
              echo "Skipping JitPack publication for non-main branch build"
              echo "SNAPSHOT version ${VERSION} is only published to local Maven repository"
            fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      - build-and-test
      - publish-to-jitpack:
          requires:
            - build-and-test
